package covenant

// Code generated by github.com/CovenantSQL/HashStablePack DO NOT EDIT.

import (
	"github.com/CovenantSQL/HashStablePack/hsp"
)

// MarshalHash marshals for hash
func (z *HeaderTest) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 8
	o = append(o, 0x88, 0x88)
	o = hsp.AppendInt32(o, z.Version)
	o = append(o, 0x88)
	o = hsp.AppendString(o, z.TestName)
	o = append(o, 0x88)
	o = hsp.AppendBytes(o, z.TestArray)
	o = append(o, 0x88)
	if oTemp, err := z.Producer.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x88)
	o = hsp.AppendArrayHeader(o, uint32(len(z.GenesisHash)))
	for za0001 := range z.GenesisHash {
		if oTemp, err := z.GenesisHash[za0001].MarshalHash(); err != nil {
			return nil, err
		} else {
			o = hsp.AppendBytes(o, oTemp)
		}
	}
	o = append(o, 0x88)
	o = hsp.AppendArrayHeader(o, uint32(len(z.ParentHash)))
	for za0002 := range z.ParentHash {
		if z.ParentHash[za0002] == nil {
			o = hsp.AppendNil(o)
		} else {
			if oTemp, err := z.ParentHash[za0002].MarshalHash(); err != nil {
				return nil, err
			} else {
				o = hsp.AppendBytes(o, oTemp)
			}
		}
	}
	o = append(o, 0x88)
	if z.MerkleRoot == nil {
		o = hsp.AppendNil(o)
	} else {
		o = hsp.AppendArrayHeader(o, uint32(len(*z.MerkleRoot)))
		for za0003 := range *z.MerkleRoot {
			if (*z.MerkleRoot)[za0003] == nil {
				o = hsp.AppendNil(o)
			} else {
				if oTemp, err := (*z.MerkleRoot)[za0003].MarshalHash(); err != nil {
					return nil, err
				} else {
					o = hsp.AppendBytes(o, oTemp)
				}
			}
		}
	}
	o = append(o, 0x88)
	o = hsp.AppendTime(o, z.Timestamp)
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HeaderTest) Msgsize() (s int) {
	s = 1 + 8 + hsp.Int32Size + 9 + hsp.StringPrefixSize + len(z.TestName) + 10 + hsp.BytesPrefixSize + len(z.TestArray) + 9 + z.Producer.Msgsize() + 12 + hsp.ArrayHeaderSize
	for za0001 := range z.GenesisHash {
		s += z.GenesisHash[za0001].Msgsize()
	}
	s += 11 + hsp.ArrayHeaderSize
	for za0002 := range z.ParentHash {
		if z.ParentHash[za0002] == nil {
			s += hsp.NilSize
		} else {
			s += z.ParentHash[za0002].Msgsize()
		}
	}
	s += 11
	if z.MerkleRoot == nil {
		s += hsp.NilSize
	} else {
		s += hsp.ArrayHeaderSize
		for za0003 := range *z.MerkleRoot {
			if (*z.MerkleRoot)[za0003] == nil {
				s += hsp.NilSize
			} else {
				s += (*z.MerkleRoot)[za0003].Msgsize()
			}
		}
	}
	s += 10 + hsp.TimeSize
	return
}
